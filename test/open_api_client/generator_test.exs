defmodule OpenAPIClient.GeneratorTest do
  use ExUnit.Case, async: true

  @temp_dir_name_length 16
  @oapi_generator_app :oapi_generator
  @open_api_client_app :open_api_client_ex
  @test_profile :test
  @temp_profile :temp_test

  test "check test generation produces the same files" do
    # Generate temporary dir
    tmp_dir =
      @temp_dir_name_length
      |> :crypto.strong_rand_bytes()
      |> Base.url_encode64(padding: false)
      |> then(&Path.join(System.tmp_dir!(), &1))

    # Removing exissting contents (just in case, paranoia)
    File.rm_rf!(tmp_dir)

    # Create dir structure
    oapi_generator_dir = Path.join(tmp_dir, "#{@oapi_generator_app}")
    open_api_client_dir = Path.join(tmp_dir, "#{@open_api_client_app}")

    File.mkdir!(tmp_dir)
    File.mkdir!(oapi_generator_dir)
    File.mkdir!(open_api_client_dir)

    # Redirect generated content to temporary dirs
    oapi_generator_test_config = Application.fetch_env!(@oapi_generator_app, @test_profile)
    oapi_generator_output_location = get_in(oapi_generator_test_config, [:output, :location])

    oapi_generator_test_config
    |> put_in([:output, :location], oapi_generator_dir)
    |> then(&Application.put_env(@oapi_generator_app, @temp_profile, &1))

    open_api_client_test_config = Application.fetch_env!(@open_api_client_app, @test_profile)
    open_api_client_output_location = get_in(open_api_client_test_config, [:test_location])

    open_api_client_test_config
    |> Keyword.merge(test_location: open_api_client_dir, aliased_profile: @test_profile)
    |> then(&Application.put_env(@open_api_client_app, @temp_profile, &1))

    # Run generator with temporary profile
    Mix.Task.run("api.gen", ["#{@temp_profile}", "test/fixture/test.yaml"])

    # Compare files generated by :oapi_generator
    oapi_generator_dir
    |> Path.join("**/*.ex")
    |> Path.wildcard()
    |> Enum.each(fn test_filename ->
      relative_filename = Path.relative_to(test_filename, oapi_generator_dir)
      real_filename = Path.join(oapi_generator_output_location, relative_filename)
      assert File.read!(real_filename) == File.read!(test_filename)
    end)

    # Compare files generated by :open_api_client_ex
    open_api_client_dir
    |> Path.join("**/*.exs")
    |> Path.wildcard()
    |> Enum.each(fn test_filename ->
      relative_filename = Path.relative_to(test_filename, open_api_client_dir)
      real_filename = Path.join(open_api_client_output_location, relative_filename)
      assert File.read!(real_filename) == File.read!(test_filename)
    end)

    File.rm_rf!(tmp_dir)
  end
end
